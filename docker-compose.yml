# Definição dos nossos serviços (containers)
services:

  # Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: postgres-highbee
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: high-bee
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: CR2CPL6RH2GM
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ---- HEALTHCHECK PARA O POSTGRES ----
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d high-bee"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço do Redis
  redis:
    image: redis:7-alpine
    container_name: redis-highbee
    ports:
      - "6379:6379"
    # ---- HEALTHCHECK PARA O REDIS ----
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da nossa aplicação Spring Boot
  app:
    container_name: app-highbee
    build: .
    ports:
      - "8080:8080" # Porta da aplicação
      - "5005:5005" # Porta de DEBUG
    environment:
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/high-bee
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: CR2CPL6RH2GM
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    # ---- ATUALIZAÇÃO DO DEPENDS_ON ----
    # Agora a aplicação só inicia DEPOIS que o healthcheck do DB e do Redis passar
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mapeia o código fonte
      - .:/app
      # Isola o cache do Gradle para evitar conflitos de lock
      - gradle_cache:/home/gradle/.gradle
    command: ./gradlew bootRun --no-daemon

# Definição dos volumes nomeados
volumes:
  postgres_data:
  gradle_cache: